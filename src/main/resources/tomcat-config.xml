<?xml version="1.0" encoding="UTF-8"?>
<!--
	顶层元素:<Server>和<Service>
		server是整个配置文件的根元素, service表示一个engine元素以及一组与之相连的connector元素
	连接器:<Connector>
		外部客户端发送请求到特定service的接口, 同时也是外部客户端从特定Service接收响应的接口。
-->
<!--
Server元素在最顶层，代表整个Tomcat容器，因此它必须是server.xml中唯一一个最外层的元素。
一个Server元素中可以有一个或多个Service元素。
Server的主要任务，就是提供一个接口让客户端能够访问到这个Service集合，同时维护它所包含的所有的Service的声明周期，
包括如何初始化、如何结束服务、如何找到客户端要访问的Service。
-->
<Server port="8005" shutdown="SHUTDOWN">
  <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
  <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

  <GlobalNamingResources>
    <Resource name="UserDatabase" auth="Container"
              type="org.apache.catalina.UserDatabase"
              description="User database that can be updated and saved"
              factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
              pathname="conf/tomcat-users.xml" />
  </GlobalNamingResources>

  <!--
  Service的作用，是在Connector和Engine外面包了一层，把它们组装在一起，对外提供服务。
  一个Service可以包含多个Connector，但是只能包含一个Engine；
  其中Connector的作用是从客户端接收请求，Engine的作用是处理接收进来的请求。
  可以增加service配置, 是
  -->
  <Service name="Catalina">
    <!--
	Connector的主要功能，是接收连接请求，创建Request和Response对象用于和请求端交换数据；
	然后分配线程让Engine来处理这个请求，并把产生的Request和Response对象传给Engine。
	-->
	<!--客户端可以通过8080端口号使用http协议访问Tomcat-->
    <Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
	<!--
	客户端可以通过8009端口号使用AJP协议访问Tomcat, AJP协议负责和其他的HTTP服务器(如Apache)建立连接；在把Tomcat与其他HTTP服务器集成时，就需要用到这个连接器。
	因为Tomcat可以用作Servlet/JSP容器，但是对静态资源的处理速度较慢，不如Apache和IIS等HTTP服务器；因此常常将Tomcat与Apache等集成，前者作Servlet容器，后者处理静态资源，而AJP协议便负责Tomcat和Apache的连接。
	-->
    <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />
	
	<!--
	Engine组件在Service组件中有且只有一个；Engine是Service组件中的请求处理组件。Engine组件从一个或多个Connector中接收请求并处理，并将完成的响应返回给Connector，最终传递给客户端。
	-->
    <Engine name="Catalina" defaultHost="localhost">
      <Realm className="org.apache.catalina.realm.LockOutRealm">
        <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
               resourceName="UserDatabase"/>
      </Realm>

	  <!---
	  Host是Engine的子容器。Engine组件中可以内嵌1个或多个Host组件，每个Host组件代表Engine中的一个虚拟主机。Host组件至少有一个，且其中一个的name必须与Engine组件的defaultHost属性相匹配。
	  Host虚拟主机的作用，是运行多个Web应用（一个Context代表一个Web应用），并负责安装、展开、启动和结束每个Web应用。
	  Host组件代表的虚拟主机，对应了服务器中一个网络名实体(如”www.test.com”，或IP地址”116.25.25.25”)；为了使用户可以通过网络名连接Tomcat服务器，这个名字应该在DNS服务器上注册。
	  appBase:将war包放到的目录  autoDeploy:自动部署
	  -->
      <Host name="localhost"  appBase="webapps" unpackWARs="true" autoDeploy="true">
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="localhost_access_log" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
		<!--
		Context元素代表在特定虚拟主机上运行的一个Web应用。
		Context是Host的子容器，每个Host中可以定义任意多的Context元素。
		
		-->
      </Host>
    </Engine>
  </Service>
</Server>
